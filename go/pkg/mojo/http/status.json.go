// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package http

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

func init() {
	core.RegisterJSONTypeDecoder("http.Status", &StatusStringCodec{})
	core.RegisterJSONTypeEncoder("http.Status", &StatusStringCodec{})
}

// BareStatus will be jsonify to raw, without any codec
type BareStatus Status

type StatusStringCodec struct {
	IsFieldPointer bool
}

func (codec *StatusStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	status := codec.status(ptr)
	if status == nil {
		status = &Status{}
		*(**Status)(ptr) = status
	}

	if err := status.Parse(s); err != nil {
		iter.ReportError("StatusStringCodec", err.Error())
	}
}

func (codec *StatusStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	status := codec.status(ptr)
	if status != nil {
		if checker, ok := interface{}(status).(core.EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *StatusStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	status := codec.status(ptr)
	stream.WriteString(status.Format())
}

func (codec *StatusStringCodec) status(ptr unsafe.Pointer) *Status {
	if codec.IsFieldPointer {
		return *(**Status)(ptr)
	}
	return (*Status)(ptr)
}

type StatusStructCodec struct {
	IsFieldPointer bool
}

func (codec *StatusStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	status := codec.bareStatus(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if status == nil {
			status = &BareStatus{}
			*(**BareStatus)(ptr) = status
		}
		a.ToVal(status)
	}
}

func (codec *StatusStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	status := (*Status)(codec.bareStatus(ptr))
	if status != nil {
		if checker, ok := interface{}(status).(core.EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *StatusStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareStatus(ptr))
}

func (codec *StatusStructCodec) bareStatus(ptr unsafe.Pointer) *BareStatus {
	if codec.IsFieldPointer {
		return *(**BareStatus)(ptr)
	}
	return (*BareStatus)(ptr)
}
