// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package http

import (
	jsoniter "github.com/json-iterator/go"
	"unsafe"
)

func init() {
	jsoniter.RegisterTypeDecoder("http.Method", &MethodCodec{})
	jsoniter.RegisterTypeEncoder("http.Method", &MethodCodec{})
}

type MethodCodec struct {
}

func (codec *MethodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	e := (*Method)(ptr)
	if any.ValueType() == jsoniter.StringValue {
		e.Parse(any.ToString())
	} else if any.ValueType() == jsoniter.NumberValue {
		value := any.ToInt32()
		if _, ok := MethodNames[value]; ok {
			*e = Method(value)
		}
	}
}

func (codec *MethodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	e := (*Method)(ptr)
	stream.WriteString(e.Format())
}

func (codec *MethodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	e := (*Method)(ptr)
	return e == nil || *e == 0
}
